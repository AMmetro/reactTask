{"version":3,"sources":["p2-homeworks/h7/common/c6-SuperRadio/SuperRadio.module.css","p2-homeworks/h7/common/c5-SuperSelect/SuperSelect.tsx","p2-homeworks/h7/common/c6-SuperRadio/SuperRadio.tsx","p2-homeworks/h7/HW7.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","SuperSelect","options","onChange","onChangeOption","map","elem","i","key","value","selected","SuperRadio","type","name","onChangeCallback","e","currentTarget","mappedOptions","o","className","s","form_radio_btn","id","checked","htmlFor","wrapper","arr","HW7","useState","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,eAAiB,mCAAmC,QAAU,8B,wJC2CjEC,EAjCqC,SAAC,GAM/C,IAJEC,EAIH,EAJGA,QAIH,EAHGC,SAGH,EAHaC,eAGb,uDAE4BF,GAAUA,EAAQG,KAAI,SAACC,EAAMC,GAAP,OAAa,4BACxDC,IAAKF,EAAO,IAAMC,EAClBE,MAAOH,EACPI,SAAe,GAALH,GACTD,O,gBCyBEK,EAtCmC,SAAC,GAO9C,EALGC,KAKF,IALQC,EAKT,EALSA,KACNX,EAIH,EAJGA,QAASO,EAIZ,EAJYA,MACCL,GAGb,EAHGD,SAGH,EAHaC,gBAIRU,GADL,6EACwB,SAACC,GAErBX,GAAkBA,EAAeW,EAAEC,cAAcP,SAIhDQ,EAAuBf,EAAUA,EAAQG,KAAI,SAACa,EAAGX,GAAJ,OAC/C,yBAAKY,UAAWC,IAAEC,gBAEV,2BACIT,KAAM,QACNU,GAAIJ,EACJL,KAAMA,EACNU,QAAUL,GAAKT,EACfA,MAAOS,EACPf,SAAUW,IAElB,2BAAON,IAAKK,EAAO,IAAMN,EAAGiB,QAASN,GAAIA,OAI5C,GAEL,OACI,yBAAKC,UAAWC,IAAEK,SACdR,ICvCNS,EAAM,CAAC,IAAK,IAAK,IAAK,KAmCbC,MAjCf,WAAgB,IAAD,EACqBC,mBAASF,EAAI,IADlC,mBACJjB,EADI,KACGL,EADH,KAGX,OACI,6BACI,6BADJ,cAII,6BACI,kBAAC,EAAD,CACIF,QAASwB,EACTjB,MAAOA,EACPL,eAAgBA,KAGxB,6BACI,kBAAC,EAAD,CACIS,KAAM,QACNX,QAASwB,EACTjB,MAAOA,EACPL,eAAgBA,KAIxB,6BAIA,+BCAGyB,MApBf,WACI,OACI,6BACI,4BAQA,kBAAC,EAAD,QCbQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.456a82f1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form_radio_btn\":\"SuperRadio_form_radio_btn__11TJw\",\"wrapper\":\"SuperRadio_wrapper__2iA5n\"};","import React, {SelectHTMLAttributes, DetailedHTMLProps, ChangeEvent} from \"react\";\r\n\r\n\r\n\r\ntype DefaultSelectPropsType = DetailedHTMLProps<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>\r\n\r\ntype SuperSelectPropsType = DefaultSelectPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n}\r\n\r\nconst SuperSelect: React.FC<SuperSelectPropsType> = (\r\n    {\r\n        options,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    const mappedOptions: any[] = options ? options.map((elem, i) => <option\r\n            key={elem + \"-\" + i}  // map options with key\r\n            value={elem}\r\n            selected={i == 1 ? true : false}>\r\n            {elem}\r\n        </option>)\r\n        : [];\r\n\r\n\r\n    const onChangeCallback = (e: ChangeEvent<HTMLSelectElement>) => {\r\n        // onChange\r\n        onChangeOption && onChangeOption(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        //  value в restProps перебивает \"selected=true/false\"\r\n\r\n            <select onChange={onChangeCallback} {...restProps}>\r\n               {mappedOptions}\r\n            </select>\r\n\r\n    );\r\n}\r\n\r\nexport default SuperSelect;\r\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperRadio.module.css\"\r\n\r\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperRadioPropsType = DefaultRadioPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n}\r\n\r\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\r\n    {\r\n        type, name,\r\n        options, value,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // onChange, onChangeOption\r\n         onChangeOption && onChangeOption(e.currentTarget.value)\r\n    }\r\n\r\n  // map options with key\r\n    const mappedOptions: any[] = options ? options.map((o, i) => (\r\n        <div className={s.form_radio_btn}>\r\n            {/*<label key={name + \"-\" + i}>*/}\r\n                <input\r\n                    type={\"radio\"}\r\n                    id={o}\r\n                    name={name}\r\n                    checked={ o == value ? true : false}\r\n                    value={o}\r\n                    onChange={onChangeCallback}\r\n                />\r\n            <label key={name + \"-\" + i} htmlFor={o}>{o}</label>\r\n            {/*    {o}*/}\r\n            {/*</label>*/}\r\n        </div>\r\n    )) : [];\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n           {mappedOptions}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SuperRadio;\r\n","import React, {useState} from \"react\";\r\nimport SuperSelect from \"./common/c5-SuperSelect/SuperSelect\";\r\nimport SuperRadio from \"./common/c6-SuperRadio/SuperRadio\";\r\n\r\nconst arr = [\"x\", \"y\", \"z\", \"w\"];\r\n\r\nfunction HW7() {\r\n    const [value, onChangeOption] = useState(arr[2]);\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 7\r\n\r\n            <div>\r\n                <SuperSelect\r\n                    options={arr}\r\n                    value={value}\r\n                    onChangeOption={onChangeOption}\r\n                />\r\n            </div>\r\n            <div>\r\n                <SuperRadio\r\n                    name={\"radio\"}\r\n                    options={arr}\r\n                    value={value}\r\n                    onChangeOption={onChangeOption}\r\n                />\r\n            </div>\r\n\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeSuperSelect/>*/}\r\n            {/*<AlternativeSuperRadio/>*/}\r\n            <hr/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW7;\r\n","import React from \"react\";\r\n// import s from \"./App.module.css\";\r\nimport HW1 from \"../../../p2-homeworks/h1/HW1\";\r\nimport HW2 from \"../../../p2-homeworks/h2/HW2\";\r\nimport HW3 from \"../../../p2-homeworks/h3/HW3\";\r\nimport HW4 from \"../../../p2-homeworks/h4/HW4\";\r\nimport HW5 from \"../../../p2-homeworks/h5/HW5\";\r\nimport HW6 from \"../../../p2-homeworks/h6/HW6\";\r\nimport HW7 from \"../../../p2-homeworks/h7/HW7\";\r\nimport HW8 from \"../../../p2-homeworks/h8/HW8\";\r\nimport HW9 from \"../../../p2-homeworks/h9/HW9\";\r\n\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <p></p>\r\n            {/*<HW1/>*/}\r\n            {/*<HW2/>*/}\r\n            {/*<HW3/>*/}\r\n            {/*<HW4/>*/}\r\n            {/*<HW5/>*/}\r\n            {/*<HW6/>*/}\r\n\r\n            <HW7/>\r\n\r\n            {/*<HW8/>*/}\r\n            {/*<HW9/>*/}\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./p1-main/m1-ui/u1-app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}